buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "Open Computers"
        url "http://maven.cil.li/"
    }
}

version = version_major + "." + version_minor + "." + version_patch
//noinspection GroovyUnusedAssignment
group= "com.cobble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = modid

sourceCompatibility = targetCompatibility = "1.6" // Need this here so eclipse task generates correctly.
//noinspection GroovyAssignabilityCheck
compileJava {
    sourceCompatibility = targetCompatibility = "1.6"
}

minecraft {
    //noinspection GrReassignedInClosureLocalVar
    version = mc_version + "-" + forge_version
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    mappings = mcp_mappings
    useDepAts = true
    clientRunArgs += "--username=${username}"

    replace '@VERSION@', project.version
    replace '@MODID@', modid
    replace '@MODNAME@', modname
}

//noinspection GroovyAssignabilityCheck
dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // Dev APIs
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}:api"
    deobfCompile "li.cil.oc:OpenComputers:MC${mc_version}-${opencomputers_version}:api"

    // Runtime mods
    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    runtime "mcp.mobius.waila:Waila:${waila_version}" // Update to use mc_version when waila version updates?
    runtime "li.cil.oc:OpenComputers:MC${mc_version}-${opencomputers_version}"
}

//noinspection GroovyAssignabilityCheck
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
